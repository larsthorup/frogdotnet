
* EarlierThanCondition (for comparing date/time)
* LaterThanCondition (for comparing date/time)

* Rename [Table(Name..] to [Entity(Source..]
* Ability to mark mapping class as [ReadOnly] (cannot be used in insert, update or delete scenarios). [Entity/Table] vs. [ReadOnlyEntity(Source)] - usefull when fetching data from views.

* Introduce DbDateTime class (with .Now, .Today, etc) for representing database time (as opposed to DateTime which is time on the application server)
* Verify database against model (mapping classes) (maybe during initialization)

* Ability to use stored procedures

* Support for INSERT INTO on Oracle. They use a different auto increment approach.

* Make all methods on Repository protected - forcing the use of custom domain-specific repositories / OR ... make all methods public allowing people to use custom 
repositories or the generic repository (has the unfortunate side effect that all methods will also be public on custom repositories)
OR ...split Repository into BaseRepository and GenericRepository, where BaseRepository has protected methods, and GenericRepository has public accessors for the protected methods.

* Support PrimaryKeys of type long (bigint), int32, and guids. Verify both with sql server
* Fetching of GUID columns

* Descriptive failures on mapping errors (like mapping string to int32)
* UpdateWhere - how are we going to implemented something like this..? Should be support this through the repository interface at all?

* Row ordering
	- Limit returned row count (e.g. TOP 200) 
	- Multiple columns	(Idea: Order.Ascending("Date").Descending("CustomerName") )
	- Single column - Done

* Support for dynamic updates/inserts based on database functions, like getdate(). Scenario: CreatedDate and ModifiedDate on an entity.
	- Ability to ignore fields in certain insert and update scenarios.
	* SQL Delegates / late calculation/ingorance of field values through delegate methods
	* ExecuteRaw method on ITransaction - Done
	
* Introduce just-in-time binding to log4net.dll

* Injection of required dependecies
	- Repository allowing mapping classes to do lazy lookup in the database. (Needed for nested types) - Done
	- Injection of something other than IRepository?
	- What happens if the repository has been disposed when attempting lazy load?!?!?


* Sample Project
	- Blog
	- Ecommerce site
	- Something else